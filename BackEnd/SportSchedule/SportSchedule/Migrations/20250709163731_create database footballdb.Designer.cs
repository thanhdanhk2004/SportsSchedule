// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SportSchedule.Context;

#nullable disable

namespace SportSchedule.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250709163731_create database footballdb")]
    partial class createdatabasefootballdb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SportSchedule.Model.AccountModel", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AccountId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("SportSchedule.Model.AwardModel", b =>
                {
                    b.Property<string>("AwardId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Gift")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GuessId")
                        .HasColumnType("text");

                    b.HasKey("AwardId");

                    b.HasIndex("GuessId")
                        .IsUnique();

                    b.ToTable("Award", (string)null);
                });

            modelBuilder.Entity("SportSchedule.Model.CardModel", b =>
                {
                    b.Property<string>("CardId")
                        .HasColumnType("text");

                    b.Property<string>("PeriodId")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("valid");

                    b.Property<int>("Time")
                        .HasColumnType("integer");

                    b.Property<string>("TypeCard")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Card Yellow");

                    b.HasKey("CardId");

                    b.HasIndex("PeriodId");

                    b.ToTable("Card", (string)null);
                });

            modelBuilder.Entity("SportSchedule.Model.CommentModel", b =>
                {
                    b.Property<string>("CommentId")
                        .HasColumnType("text");

                    b.Property<string>("CommendIdReply")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2025, 7, 9, 23, 37, 30, 802, DateTimeKind.Local).AddTicks(7480));

                    b.Property<string>("PostId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("CommentId");

                    b.HasIndex("CommendIdReply");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("SportSchedule.Model.GoalModel", b =>
                {
                    b.Property<string>("GoalId")
                        .HasColumnType("text");

                    b.Property<DateTime>("GoalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GoalType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Nomal");

                    b.Property<string>("PeriodId")
                        .HasColumnType("text");

                    b.Property<string>("PlayerId")
                        .HasColumnType("text");

                    b.Property<string>("TeamId")
                        .HasColumnType("text");

                    b.HasKey("GoalId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("Goal", (string)null);
                });

            modelBuilder.Entity("SportSchedule.Model.GuessModel", b =>
                {
                    b.Property<string>("GuessId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("GuessTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2025, 7, 9, 23, 37, 30, 859, DateTimeKind.Local).AddTicks(4424));

                    b.Property<string>("MatchId")
                        .HasColumnType("text");

                    b.Property<int?>("PredictAwayScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int?>("PredictHomeScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("GuessId");

                    b.HasIndex("MatchId");

                    b.HasIndex("UserId");

                    b.ToTable("Guess", (string)null);
                });

            modelBuilder.Entity("SportSchedule.Model.LeagueModel", b =>
                {
                    b.Property<string>("LeagueId")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SeasonId")
                        .HasColumnType("text");

                    b.HasKey("LeagueId");

                    b.HasIndex("SeasonId");

                    b.ToTable("League", (string)null);
                });

            modelBuilder.Entity("SportSchedule.Model.LeagueTeamModel", b =>
                {
                    b.Property<string>("LeagueId")
                        .HasColumnType("text");

                    b.Property<string>("TeamId")
                        .HasColumnType("text");

                    b.HasKey("LeagueId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("LeagueTeam", (string)null);
                });

            modelBuilder.Entity("SportSchedule.Model.MatchModel", b =>
                {
                    b.Property<string>("MatchId")
                        .HasColumnType("text");

                    b.Property<string>("LeagueId")
                        .HasColumnType("text");

                    b.Property<string>("SeasonId")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Chưa đá");

                    b.Property<string>("TeamIdAway")
                        .HasColumnType("text");

                    b.Property<string>("TeamIdHome")
                        .HasColumnType("text");

                    b.Property<string>("Time")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("07/09/2025 23:37:30");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MatchId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamIdAway");

                    b.HasIndex("TeamIdHome");

                    b.ToTable("Match", (string)null);
                });

            modelBuilder.Entity("SportSchedule.Model.MatchStatictisModel", b =>
                {
                    b.Property<string>("MatchStatictisId")
                        .HasColumnType("text");

                    b.Property<int?>("Corners")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("MatchId")
                        .HasColumnType("text");

                    b.Property<string>("Possession")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("50");

                    b.Property<int?>("RedCard")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("0");

                    b.Property<int?>("ShortsOnTaget")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("TeamId")
                        .HasColumnType("text");

                    b.Property<int?>("YellowCard")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("MatchStatictisId");

                    b.HasIndex("MatchId");

                    b.HasIndex("TeamId");

                    b.ToTable("MatchStatictis", (string)null);
                });

            modelBuilder.Entity("SportSchedule.Model.MemberModel", b =>
                {
                    b.Property<string>("MemberId")
                        .HasColumnType("text");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MemberId");

                    b.ToTable("Member", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SportSchedule.Model.MessageModel", b =>
                {
                    b.Property<string>("MessageId")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("SendTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2025, 7, 9, 23, 37, 30, 806, DateTimeKind.Local).AddTicks(6214));

                    b.Property<string>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("string");

                    b.Property<string>("UserIdRevice")
                        .HasColumnType("text");

                    b.Property<string>("UserIdSend")
                        .HasColumnType("text");

                    b.HasKey("MessageId");

                    b.HasIndex("UserIdRevice");

                    b.HasIndex("UserIdSend");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("SportSchedule.Model.PeriodModel", b =>
                {
                    b.Property<string>("PeriodId")
                        .HasColumnType("text");

                    b.Property<string>("MatchId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PeriodId");

                    b.HasIndex("MatchId");

                    b.ToTable("Period", (string)null);
                });

            modelBuilder.Entity("SportSchedule.Model.PostModel", b =>
                {
                    b.Property<string>("PostId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2025, 7, 9, 23, 37, 30, 795, DateTimeKind.Local).AddTicks(5899));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Post", (string)null);
                });

            modelBuilder.Entity("SportSchedule.Model.RankingModel", b =>
                {
                    b.Property<string>("RankingId")
                        .HasColumnType("text");

                    b.Property<int>("Draw")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("GoalDifference")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("GoalsAgainst")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("GoalsFor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("LeagueId")
                        .HasColumnType("text");

                    b.Property<int>("Loss")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("Played")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("Point")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("Position")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("TeamId")
                        .HasColumnType("text");

                    b.Property<int>("Win")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("RankingId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("TeamId");

                    b.ToTable("Ranking", (string)null);
                });

            modelBuilder.Entity("SportSchedule.Model.SeasonModel", b =>
                {
                    b.Property<string>("SeasonId")
                        .HasColumnType("text");

                    b.Property<string>("SeasonYear")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SeasonId");

                    b.ToTable("Season", (string)null);
                });

            modelBuilder.Entity("SportSchedule.Model.TeamMemberModel", b =>
                {
                    b.Property<string>("MemberId")
                        .HasColumnType("text");

                    b.Property<string>("TeamId")
                        .HasColumnType("text");

                    b.HasKey("MemberId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamMember", (string)null);
                });

            modelBuilder.Entity("SportSchedule.Model.TeamModel", b =>
                {
                    b.Property<string>("TeamId")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameHome")
                        .HasColumnType("text");

                    b.Property<int>("TeamType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("TeamId");

                    b.ToTable("Team", (string)null);
                });

            modelBuilder.Entity("SportSchedule.Model.UserModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(2);

                    b.HasKey("UserId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("SportSchedule.Model.PlayerModel", b =>
                {
                    b.HasBaseType("SportSchedule.Model.MemberModel");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.Property<bool?>("status")
                        .HasColumnType("boolean");

                    b.Property<string>("value")
                        .HasColumnType("text");

                    b.ToTable("Player", (string)null);
                });

            modelBuilder.Entity("SportSchedule.Model.AccountModel", b =>
                {
                    b.HasOne("SportSchedule.Model.UserModel", "User")
                        .WithOne("Account")
                        .HasForeignKey("SportSchedule.Model.AccountModel", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportSchedule.Model.AwardModel", b =>
                {
                    b.HasOne("SportSchedule.Model.GuessModel", "Guess")
                        .WithOne("Award")
                        .HasForeignKey("SportSchedule.Model.AwardModel", "GuessId");

                    b.Navigation("Guess");
                });

            modelBuilder.Entity("SportSchedule.Model.CardModel", b =>
                {
                    b.HasOne("SportSchedule.Model.PeriodModel", "Period")
                        .WithMany("Cards")
                        .HasForeignKey("PeriodId");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("SportSchedule.Model.CommentModel", b =>
                {
                    b.HasOne("SportSchedule.Model.CommentModel", "Comment")
                        .WithMany("Comments")
                        .HasForeignKey("CommendIdReply")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SportSchedule.Model.PostModel", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId");

                    b.HasOne("SportSchedule.Model.UserModel", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");

                    b.Navigation("Comment");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportSchedule.Model.GoalModel", b =>
                {
                    b.HasOne("SportSchedule.Model.PeriodModel", "Period")
                        .WithMany("Goals")
                        .HasForeignKey("PeriodId");

                    b.HasOne("SportSchedule.Model.PlayerModel", "Player")
                        .WithMany("Goals")
                        .HasForeignKey("PlayerId");

                    b.HasOne("SportSchedule.Model.TeamModel", "Team")
                        .WithMany("Goals")
                        .HasForeignKey("TeamId");

                    b.Navigation("Period");

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SportSchedule.Model.GuessModel", b =>
                {
                    b.HasOne("SportSchedule.Model.MatchModel", "Match")
                        .WithMany("Guess")
                        .HasForeignKey("MatchId");

                    b.HasOne("SportSchedule.Model.UserModel", "User")
                        .WithMany("Guess")
                        .HasForeignKey("UserId");

                    b.Navigation("Match");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportSchedule.Model.LeagueModel", b =>
                {
                    b.HasOne("SportSchedule.Model.SeasonModel", "Season")
                        .WithMany("Leagues")
                        .HasForeignKey("SeasonId");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("SportSchedule.Model.LeagueTeamModel", b =>
                {
                    b.HasOne("SportSchedule.Model.LeagueModel", "League")
                        .WithMany("LeagueTeams")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportSchedule.Model.TeamModel", "Team")
                        .WithMany("LeagueTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SportSchedule.Model.MatchModel", b =>
                {
                    b.HasOne("SportSchedule.Model.LeagueModel", "League")
                        .WithMany("Matchs")
                        .HasForeignKey("LeagueId");

                    b.HasOne("SportSchedule.Model.SeasonModel", "Season")
                        .WithMany("Matchs")
                        .HasForeignKey("SeasonId");

                    b.HasOne("SportSchedule.Model.TeamModel", "TeamAway")
                        .WithMany("MatchTeamAways")
                        .HasForeignKey("TeamIdAway");

                    b.HasOne("SportSchedule.Model.TeamModel", "TeamHome")
                        .WithMany("MatchTeamHomes")
                        .HasForeignKey("TeamIdHome");

                    b.Navigation("League");

                    b.Navigation("Season");

                    b.Navigation("TeamAway");

                    b.Navigation("TeamHome");
                });

            modelBuilder.Entity("SportSchedule.Model.MatchStatictisModel", b =>
                {
                    b.HasOne("SportSchedule.Model.MatchModel", "Match")
                        .WithMany("MatchStatictis")
                        .HasForeignKey("MatchId");

                    b.HasOne("SportSchedule.Model.TeamModel", "Team")
                        .WithMany("MatchStatictis")
                        .HasForeignKey("TeamId");

                    b.Navigation("Match");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SportSchedule.Model.MessageModel", b =>
                {
                    b.HasOne("SportSchedule.Model.UserModel", "UserRevice")
                        .WithMany("MessageRevices")
                        .HasForeignKey("UserIdRevice");

                    b.HasOne("SportSchedule.Model.UserModel", "UserSend")
                        .WithMany("MessageSends")
                        .HasForeignKey("UserIdSend");

                    b.Navigation("UserRevice");

                    b.Navigation("UserSend");
                });

            modelBuilder.Entity("SportSchedule.Model.PeriodModel", b =>
                {
                    b.HasOne("SportSchedule.Model.MatchModel", "Match")
                        .WithMany("Periods")
                        .HasForeignKey("MatchId");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("SportSchedule.Model.PostModel", b =>
                {
                    b.HasOne("SportSchedule.Model.UserModel", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportSchedule.Model.RankingModel", b =>
                {
                    b.HasOne("SportSchedule.Model.LeagueModel", "League")
                        .WithMany("Rankings")
                        .HasForeignKey("LeagueId");

                    b.HasOne("SportSchedule.Model.TeamModel", "Team")
                        .WithMany("Rankings")
                        .HasForeignKey("TeamId");

                    b.Navigation("League");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SportSchedule.Model.TeamMemberModel", b =>
                {
                    b.HasOne("SportSchedule.Model.MemberModel", "Member")
                        .WithMany("TeamMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportSchedule.Model.TeamModel", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SportSchedule.Model.PlayerModel", b =>
                {
                    b.HasOne("SportSchedule.Model.MemberModel", null)
                        .WithOne()
                        .HasForeignKey("SportSchedule.Model.PlayerModel", "MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportSchedule.Model.CommentModel", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("SportSchedule.Model.GuessModel", b =>
                {
                    b.Navigation("Award");
                });

            modelBuilder.Entity("SportSchedule.Model.LeagueModel", b =>
                {
                    b.Navigation("LeagueTeams");

                    b.Navigation("Matchs");

                    b.Navigation("Rankings");
                });

            modelBuilder.Entity("SportSchedule.Model.MatchModel", b =>
                {
                    b.Navigation("Guess");

                    b.Navigation("MatchStatictis");

                    b.Navigation("Periods");
                });

            modelBuilder.Entity("SportSchedule.Model.MemberModel", b =>
                {
                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("SportSchedule.Model.PeriodModel", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Goals");
                });

            modelBuilder.Entity("SportSchedule.Model.PostModel", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("SportSchedule.Model.SeasonModel", b =>
                {
                    b.Navigation("Leagues");

                    b.Navigation("Matchs");
                });

            modelBuilder.Entity("SportSchedule.Model.TeamModel", b =>
                {
                    b.Navigation("Goals");

                    b.Navigation("LeagueTeams");

                    b.Navigation("MatchStatictis");

                    b.Navigation("MatchTeamAways");

                    b.Navigation("MatchTeamHomes");

                    b.Navigation("Rankings");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("SportSchedule.Model.UserModel", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("Comments");

                    b.Navigation("Guess");

                    b.Navigation("MessageRevices");

                    b.Navigation("MessageSends");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("SportSchedule.Model.PlayerModel", b =>
                {
                    b.Navigation("Goals");
                });
#pragma warning restore 612, 618
        }
    }
}
